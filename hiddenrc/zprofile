make() {
   [ "$1" == 'install' ] &&
     echo -e "WARNING:\nDON'T INSTALL SOFTWARE MANUALY\nDON'T USE unset make TO OVERRIDE" &&
     echo "Tip: It's easy to make own custom package see: man PKGBUILD makepkg" &&
     return 1;
   /usr/bin/make $@;
 }

cl() {
    local dir="$1"
    local dir="${dir:=$HOME}"
    if [[ -d "$dir" ]]; then
        cd "$dir" >/dev/null; ls
    else
        echo "bash: cl: $dir: Directory not found"
    fi
}


calc() {
    echo "scale=3;$@" | bc -l
}

inote () {
    # if file doesn't exist, create it
    if [[ ! -f $HOME/.notes ]]; then
        touch "$HOME/.notes"
    fi

    if ! (($#)); then
        # no arguments, print file
        cat "$HOME/.notes"
    elif [[ "$1" == "-c" ]]; then
        # clear file
        > "$HOME/.notes"
    else
        # add all arguments to file
        printf "%s\n" "$*" >> "$HOME/.notes"
    fi
}

todo() {
    if [[ ! -f $HOME/.todo ]]; then
        touch "$HOME/.todo"
    fi

    if ! (($#)); then
        cat "$HOME/.todo"
    elif [[ "$1" == "-l" ]]; then
        nl -b a "$HOME/.todo"
    elif [[ "$1" == "-c" ]]; then
        > $HOME/.todo
    elif [[ "$1" == "-r" ]]; then
        nl -b a "$HOME/.todo"
        eval printf %.0s- '{1..'"${COLUMNS:-$(tput cols)}"\}; echo
        read -p "Type a number to remove: " number
        sed -i ${number}d $HOME/.todo "$HOME/.todo"
    else
        printf "%s\n" "$*" >> "$HOME/.todo"
    fi
}

ipif() { 
    if grep -P "(([0-9]\d{0,2})\.){3}(?2)" <<< "$1"
    then
        curl -l ipinfo.io/"$1"
    else
        local ipadd=$(host "$1") &&
        local ipawk=$(awk '{ print $4 }' <<< "$ipadd")
        curl ipinfo.io/"$ipawk"
    fi
    echo
}

#Now open a terminal and just do:  
#secure_chromium
function secure_chromium {
    port=1080
    #使用以下两种配置都可以
    #export SOCKS_SERVER=localhost:$port
    #export SOCKS_VERSION=5
    #chromium &
    chromium --proxy-server="socks://localhost:$port" &
    exit
}

# help url:https://wiki.archlinux.org/index.php/Kernel_modules_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)  显示所有内核参数的脚本
function aa_mod_parameters () 
{ 
    N=/dev/null;
    C=`tput op` O=$(echo -en "\n`tput setaf 2`>>> `tput op`");
    for mod in $(cat /proc/modules|cut -d" " -f1);
    do
        md=/sys/module/$mod/parameters;
        [[ ! -d $md ]] && continue;
        m=$mod;
        d=`modinfo -d $m 2>$N | tr "\n" "\t"`;
        echo -en "$O$m$C";
        [[ ${#d} -gt 0 ]] && echo -n " - $d";
        echo;
        for mc in $(cd $md; echo *);
        do
            de=`modinfo -p $mod 2>$N | grep ^$mc 2>$N|sed "s/^$mc=//" 2>$N`;
            echo -en "\t$mc=`cat $md/$mc 2>$N`";
            [[ ${#de} -gt 1 ]] && echo -en " - $de";
            echo;
        done;
    done
}

function randpw32(){ < /dev/urandom tr -dc '!@#$%^&*'_A-Z-a-z-0-9 | head -c${1:-32};echo; }

function randpw16(){ < /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-16};echo; }

function randhcj(){
    var=`echo $1 | sha512sum | awk '{print $1}'`
    hcj="*${var:66:6}%${var:77:7}@"
    echo ${hcj}
    echo
}

# pacman
#help url https://wiki.archlinux.org/index.php/Pacman_tips#Shortcuts
pacman-size()
{
    CMD="pacman -Si"
    SEP=": "
    TOTAL_SIZE=0
    
    RESULT=$(eval "${CMD} $@ 2>/dev/null" | awk -F "$SEP" -v filter="Size" -v pkg="^Name" \
      '$0 ~ pkg {pkgname=$2} $0 ~ filter {gsub(/\..*/,"") ; printf("%6s KiB %s\n", $2, pkgname)}' | sort -u -k3)
    
    echo "$RESULT"
    
    ## Print total size.
    echo "$RESULT" | awk '{TOTAL=$1+TOTAL} END {printf("Total : %d KiB\n",TOTAL)}'
}

function listpackages() {
  expac -H M "%011m\t%-20n\t%10d" $(comm -23 <(pacman -Qqen | sort) <(pacman -Qqg base base-devel | sort)) | sort -n
}

function showpackage() {
  local PACKAGE="$1"
  if [[ "$PACKAGE" == "" ]]; then
    echo "pacmanqlq 'package name'"
  else
    pacman -Qlq $1 | grep -v '/$' | xargs du -h | sort -h
  fi
}

function listpackbydate() {
  local LIMIT="$1"
  if [[ ! $LIMIT = ~^[0-9] ]]; then
    expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort | tail -n $LIMIT
  else
    expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort | tail -n 20
  fi
}

dclean() {
    processes=`docker ps -q -f status=exited`
    if [ -n "$processes" ]; then
      echo $processes | xargs docker rm
    fi

    images=`docker images -q -f dangling=true`
    if [ -n "$images" ]; then
      echo $images | xargs docker rmi
    fi
}

dcleanlaradock() {
	echo 'Removing ALL containers associated with laradock'
	docker ps -a | awk '{ print $1,$2 }' | grep laradock | awk '{print $1}' | xargs -I {} docker rm {}

	# remove ALL images associated with laradock_
	# does NOT delete laradock/* which are hub images
	echo 'Removing ALL images associated with laradock_'
	docker images | awk '{print $1,$2,$3}' | grep laradock_ | awk '{print $3}' | xargs -I {} docker rmi {}

	echo 'Listing all laradock docker hub images...'
	docker images | grep laradock

	echo 'dcleanlaradock completed'
}
