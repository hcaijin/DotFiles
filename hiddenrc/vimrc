" vimrc configure
let g:mapleader =";"
let s:is_win = has('win32')
let $v = $HOME.(s:is_win ? '\vimfiles' : '/.vim')

" help: https://github.com/junegunn/vim-plug
let s:plug_file = $v.'/autoload/plug.vim'
if ! filereadable(expand(s:plug_file))
	echo "Downloading junegunn/vim-plug to manage plugins..."
	silent execute '!curl -fLo '.s:plug_file.' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	autocmd VimEnter * PlugInstall
endif

" Plug {{{1
let s:bundle_dir = $v.'/bundle'
call plug#begin(s:bundle_dir)
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'lilydjwg/fcitx.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'kshenoy/vim-signature'
Plug 'terryma/vim-multiple-cursors'
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
Plug 'Lokaltog/vim-easymotion'
Plug 'gcmt/wildfire.vim'
Plug 'xolox/vim-session'
Plug 'xolox/vim-misc'
Plug 'majutsushi/tagbar',         {'on': 'TagbarToggle'}
Plug 'mbbill/undotree',           {'on': 'UndotreeToggle'}
Plug 'raghur/fruzzy',             {'do': { -> fruzzy#install()}}
Plug 'junegunn/vim-easy-align',   {'on': '<plug>(LiveEasyAlign)'}
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'dyng/ctrlsf.vim'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug '~/.cache/zsh4humans/v3/fzf'
Plug 'scrooloose/syntastic'
Plug 'dbeniamine/cheat.sh-vim'
call plug#end()
" }}}1

" setting {{{1

	syntax on
	filetype plugin on
	" 自适应不同语言的智能缩进
	filetype indent on
	" 关闭vi兼容模式
	set nocompatible
	" 将制表符扩展为空格
	set expandtab
	" 设置编辑时制表符占用空格数
	set tabstop=4
	" 设置格式化时制表符占用空格数
	set shiftwidth=4
	" 让 vim 把连续数量的空格视为一个制表符
	set softtabstop=4
	" backgroud: light|dark
    set background=light
	set go=a
	" set mouse=v
	" 禁止折行,可以使用:set wrap使用折行
	set nowrap
	" 高亮显示当前行/列
	" set cursorline
	" set cursorcolumn
	" 可以与系统剪贴版通过y,p复制粘贴 h: clipboard-unnamedplus
    if has('unnamedplus')
        set clipboard+=unnamedplus,unnamed
        vnoremap <leader>y "+y
        " vnoremap <leader>d "+d
        nnoremap <leader>p "+p
        " inoremap <C-x> <C-r><C-o>+
    else
        vnoremap <silent><leader>y :w !wl-copy<cr><cr>
        " vnoremap <silent><C-x> :w !wl-copy<cr><cr>
        nnoremap <silent><leader>p :r !wl-paste<cr><cr>
        " inoremap <silent><C-x> <esc>:r !wl-paste<cr><cr>
    endif
	" 设置 gvim 显示字体
	"set guifont=Inconsolata-g\ for\ Powerline\ 13
	" Some basics:
	set encoding=utf-8
	set number relativenumber
	" Splits open at the bottom and right, which is non-retarded, unlike vim defaults.
	set splitbelow splitright
	" 设置显示样式 :help :highlight | :h termguicolors
	" set hilighlight
	" 高亮显示搜索
	set hlsearch
	" 开启实时搜索功能
	set incsearch
	" 搜索时大小写不敏感
	set ignorecase
	" vim 自身命令行模式智能补全
	" set wildmenu
	" Enable autocompletion:
	set wildmode=longest,list,full
	" disable scanning included files
	set complete-=i
	" disable searching tags
	" 设置备份,保存成功删除
     set writebackup
    " 设置显示文件全局路径
    " set ls=2

" }}}

" :help mapping {{{1
    tnoremap <A-e>            <nop>
    tnoremap <esc>            <c-\><c-n>
    tnoremap <C-d>            <C-\><C-N>ZQ
    tnoremap <leader>q        <C-\><C-N>ZQ
    tnoremap <C-h>            <C-\><C-N><C-w>h
    tnoremap <C-j>            <C-\><C-N><C-w>j
    tnoremap <C-k>            <C-\><C-N><C-w>k
    tnoremap <C-l>            <C-\><C-N><C-w>l
    if has('nvim')
      autocmd TermOpen,BufEnter term://* startinsert
      nnoremap <leader>:        :sp +terminal<cr>
    else
      nnoremap <leader>:        :terminal<cr>
    endif

    " 禁用按键
    " noremap <home> <nop>
    " noremap <end> <nop>
    " noremap <insert> <nop>
    " noremap <delete> <nop>
    " 是否切换目录
    nnoremap <leader>a :set autochdir<cr>
    nnoremap <leader>A :set noautochdir<cr>
    " 保存快捷键
    nnoremap <leader>es :SaveSession!<cr>
    " 恢复快捷键
    nnoremap <leader>er :OpenSession!<cr>
    " vsplit | split
    nnoremap <leader>v :vs<CR>
    nnoremap <leader>b :sp<CR>
    " buffers ls
    " nnoremap <leader><leader> :ls<CR>:bu<space>
    " <tab> move
    " nnoremap <TAB> <C-w>w
    nnoremap <A-TAB> :tabnext<CR>
    nnoremap <S-TAB> :tabprevious<CR>
	" shortcutting split navigation, saving a keypress:
	nnoremap <c-h> <c-w>h
	nnoremap <c-j> <c-w>j
	nnoremap <c-k> <c-w>k
	nnoremap <c-l> <c-w>l
	" Spell-check set to <leader>o, 'o' for 'orthography':
	" nnoremap <leader>o :setlocal spell! spelllang=en_us<CR>
	" quit file
	" nnoremap <esc><esc> :q<cr>
	nnoremap <leader>q :q<cr>
	" !quit all file
	nnoremap <leader>Q :qall<cr>
	" save file
	nnoremap <leader>w :w<cr>
	nnoremap <leader>W :w!<cr>
    " open new tab
    nnoremap <leader>N :tabnew<CR>:edit<space>
	" insert model save file
	inoremap jj <esc>:w<cr>
	" change insert model to format model
	inoremap jk <esc>
    " 插入模式禁用<ESC>
    " inoremap <esc> <nop>
	" save file as sudo on files that require root permission
	cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!
	" replace all is aliased to s.
	nnoremap <leader>S :%s//g<left><left>
	" 帮助查询
	nnoremap <leader>h :helpgrep<space>
	" vsplit ~/.vimrc
	nnoremap <leader>ee :vsplit $MYVIMRC<cr>
	" source vimrc
	nnoremap <leader>ev :source $MYVIMRC<cr>
    " :help redraw!
    nnoremap <leader>l :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>
    " 快速移动当前行 Example: 2]e
    noremap [e  :<c-u>execute 'move -1-'. v:count1<cr>
    nnoremap ]e  :<c-u>execute 'move +'. v:count1<cr>
    " 快速添加空行 Example: 5[<space>
    nnoremap [<space>  :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
    nnoremap ]<space>  :<c-u>put =repeat(nr2char(10), v:count1)<cr>
    " 快速编辑自定义宏 就是在一个新的命令行窗口中读取某一个寄存器:reg（默认为 *）。当你修改完成后，只需要按下 回车 即可让它生效。
    nnoremap <leader>M  :<c-u><c-r><c-r>='let @'. v:register .' = '. string(getreg(v:register))<cr><c-f><left>
    " :h gv
    xnoremap <  <gv
    xnoremap >  >gv

    if has('nvim') " {{{if
        " copy folder path to clipboard, foo/bar/foobar.c => foo/bar/
        nnoremap <silent> <leader>y1 :let @*=fnamemodify(bufname('%'),":p:h")<CR>
        " copy file name to clipboard, foo/bar/foobar.c => foobar.c
        nnoremap <silent> <leader>y2 :let @*=fnamemodify(bufname('%'),":p:t")<CR>
        " copy full path to clipboard, foo/bar/foobar.c => foo/bar/foobar.c
        nnoremap <silent> <leader>y3 :let @*=fnamemodify(bufname('%'),":p")<CR>
    else
        nnoremap <silent> <leader>y1 :let @"=fnamemodify(bufname('%'),":p:h")<CR>
        " copy file name to clipboard, foo/bar/foobar.c => foobar.c
        nnoremap <silent> <leader>y2 :let @"=fnamemodify(bufname('%'),":p:t")<CR>
        " copy full path to clipboard, foo/bar/foobar.c => foo/bar/foobar.c
        nnoremap <silent> <leader>y3 :let @"=fnamemodify(bufname('%'),":p")<CR>
   endif " }}}if

    " coc-translator mapping
    " popup
    nmap <Leader>tt <Plug>(coc-translator-p)
    vmap <Leader>tt <Plug>(coc-translator-pv)
    " echo
    nmap <Leader>te <Plug>(coc-translator-e)
    vmap <Leader>te <Plug>(coc-translator-ev)
    " replace
    nmap <Leader>tr <Plug>(coc-translator-r)
    vmap <Leader>tr <Plug>(coc-translator-rv)

    nnoremap <leader>L ggVG=:w<CR>''
    nnoremap <leader>r :edit<CR>
" }}}

" plugin {{{1

    " Plugin: airline {{{2
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline#extensions#tabline#buffer_nr_show = 0
    let g:airline#extensions#tabline#formatter = 'default'
    let g:airline_theme = 'badwolf'
    let g:airline#extensions#keymap#enabled = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#buffer_idx_format = {
           \ '0': '0 ',
           \ '1': '1 ',
           \ '2': '2 ',
           \ '3': '3 ',
           \ '4': '4 ',
           \ '5': '5 ',
           \ '6': '6 ',
           \ '7': '7 ',
           \ '8': '8 ',
           \ '9': '9 '
           \}
    nmap <leader>1 <Plug>AirlineSelectTab1
    nmap <leader>2 <Plug>AirlineSelectTab2
    nmap <leader>3 <Plug>AirlineSelectTab3
    nmap <leader>4 <Plug>AirlineSelectTab4
    nmap <leader>5 <Plug>AirlineSelectTab5
    nmap <leader>6 <Plug>AirlineSelectTab6
    nmap <leader>7 <Plug>AirlineSelectTab7
    nmap <leader>8 <Plug>AirlineSelectTab8
    nmap <leader>9 <Plug>AirlineSelectTab9
    nmap <leader>j <Plug>AirlineSelectPrevTab
    nmap <leader>k <Plug>AirlineSelectNextTab
    nmap <leader>K :bp<cr>:bd #<cr>
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_symbols.linenr = "CL" " current line
    let g:airline_symbols.whitespace = ''
    " let g:airline_left_sep  = '>'
    " let g:airline_right_sep = '<'
    " let g:airline_left_alt_sep = ')'
    " let g:airline_right_alt_sep = '('
    let g:airline_symbols.maxlinenr = 'Ml' "maxline
    let g:airline_symbols.branch = 'BR'
    let g:airline_symbols.readonly = "RO"
    let g:airline_symbols.dirty = "DT"
    let g:airline_symbols.crypt = "CR"
    " }}}2

    " Plugin: surround {{{2
    " -----------------------------------------------------------------------------
    " usage: https://github.com/tpope/vim-surround
    "  <  vim-surround Press cs"' (that's c, s, double quote, single quote) insidectags >
    " -----------------------------------------------------------------------------
    "}}}2

    " Plugin: nerdtree {{{2
    " -----------------------------------------------------------------------------
	nnoremap <leader>F :NERDTreeToggle<CR>
	nnoremap <leader>fp :NERDTreeCWD<CR>
	nnoremap <leader>ff :NERDTreeFind<CR>
	inoremap <leader>ff <ESC>:NERDTreeFind<CR>
    " 设置NERDTree子窗口宽度
    let NERDTreeWinSize=32
    " 设置NERDTree子窗口位置
    let NERDTreeWinPos="right"
    " 显示隐藏文件
    let NERDTreeShowHidden=1
    " NERDTree 子窗口中不显示冗余帮助信息
    let NERDTreeMinimalUI=1
    " 删除文件时自动删除文件对应 buffer
    let NERDTreeAutoDeleteBuffer=1
    " 在窗口里可以使用q退出
	autocmd bufenter * if (winnr("$") == 1 && exists("b:nerdtree") && b:nerdtree.istabtree()) | q | endif
    "}}}2

    " Plugin: nerdcommenter {{{2
    " -----------------------------------------------------------------------------
    " Add spaces after comment delimiters by default
    let g:NERDSpaceDelims = 1
    " Use compact syntax for prettified multi-line comments
    let g:NERDCompactSexyComs = 1
    " Align line-wise comment delimiters flush left instead of following code indentation
    let g:NERDDefaultAlign = 'left'
    " Set a language to use its alternate delimiters by default
    let g:NERDAltDelims_java = 1
    " Add your own custom formats or override the defaults
    let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
    " Allow commenting and inverting empty lines (useful when commenting a region)
    let g:NERDCommentEmptyLines = 1
    " Enable trimming of trailing whitespace when uncommenting
    let g:NERDTrimTrailingWhitespace = 1
    " Enable NERDCommenterToggle to check all selected lines is commented or not
    let g:NERDToggleCheckAllLines = 1
    "}}}2

    " Plugin: tagbar {{{2
    " -----------------------------------------------------------------------------
    nnoremap <leader>T :TagbarToggle<cr>

    let g:tagbar_width     = 40
    let g:tagbar_autoclose = 0
    let g:tagbar_autofocus = 1
    let g:tagbar_compact   = 1
    "}}}2

    " Plugin: undotree {{{2
    " -----------------------------------------------------------------------------
    nnoremap <leader>U  :UndotreeToggle<cr>
    "}}}2

    " Plugin: wildfire.vim {{{2
    " -----------------------------------------------------------------------------
	" < wildfire.vim >快速编辑结对符
    " -----------------------------------------------------------------------------
    " 快捷键
    map <C-SPACE> <Plug>(wildfire-fuel)
    vmap <S-SPACE> <Plug>(wildfire-water)
    " 适用于哪些结对符
    let g:wildfire_objects = ["i'", 'i"', "i)", "i]", "i}", "i>", "ip"]
    "}}}2

    " Plugin: vim-easymotion {{{2
    " -----------------------------------------------------------------------------
    " -----------------------------------------------------------------------------
	" < vim-easymotion > 快速移动
    " -----------------------------------------------------------------------------
    " Disable default mappings
    let g:EasyMotion_do_mapping = 0
    " Turn on case-insensitive feature
    let g:EasyMotion_smartcase = 1
    " Jump to anywhere you want with minimal keystrokes, with just one key binding.
    " `s{char}{label}`
    " nmap s <Plug>(easymotion-overwin-f)
    " or
    " `s{char}{char}{label}`
    " Need one more keystroke, but on average, it may be more comfortable.
    nmap <silent><space> <Plug>(easymotion-overwin-f2)
    "}}}2

    " Plugin: vim-session {{{2
    " -----------------------------------------------------------------------------
	" < vim-session > 恢复工作台环境 安装依赖vim-misc
    " -----------------------------------------------------------------------------
    " :SaveSession!
    " :OpenSession!
    let g:session_lock_enabled = 0
    let g:session_persist_globals = ['&sessionoptions']
    call add(g:session_persist_globals, 'g:session_autoload')
    call add(g:session_persist_globals, 'g:session_autosave')
    call add(g:session_persist_globals, 'g:session_default_to_last')
    call add(g:session_persist_globals, 'g:session_persist_globals')
    "}}}2

    " Plugin: vim-easy-align {{{2
    " -----------------------------------------------------------------------------
    xmap <cr> <plug>(LiveEasyAlign)
    "}}}2

    " Plugin: fzf {{{2
    nnoremap <leader><leader> :Buffers<cr>
    let g:fzf_history_dir = '~/.local/share/fzf-history'
    nnoremap <leader>B :Barschemes<cr>
    nnoremap <leader>C :Colorschemes<cr>
    nnoremap <leader>P :Plugins<cr>

    function! s:buflist()
      return map(filter(range(1, bufnr('$')),
            \ 'buflisted(v:val)'), 'printf("%s: %s", v:val, bufname(v:val))')
    endfunction

    function! s:bufopen(lines)
      if len(a:lines) < 2 | return | endif
      let cmd = get({
        \ 'ctrl-s': 'split',
        \ 'ctrl-v': 'vsplit',
        \ 'ctrl-t': 'tabedit'
        \ }, a:lines[0], 'edit')
      execute cmd '+b'.matchstr(a:lines[1], '^\d\+')
    endfunction

    function! s:plugopen(entry)
      execute 'NERDTree' expand(s:bundle_dir) .'/'. a:entry
    endfunction

    function! s:changetheme(entry)
      execute 'AirlineTheme' a:entry
    endfunction

    command! Buffers let bl = reverse(s:buflist()) | call fzf#run({
          \ 'source':  bl,
          \ 'sink*':   function('<sid>bufopen'),
          \ 'options': '+m --expect=ctrl-s,ctrl-v,ctrl-t',
          \ 'down':    '~30%',
          \ }) | unlet bl

    command! Plugins call fzf#run({
          \ 'source':  reverse(sort(map(globpath(s:bundle_dir, '*', 0, 1), 'fnamemodify(v:val, ":t")'))),
          \ 'sink':    function('<sid>plugopen'),
          \ 'options': '+m',
          \ 'left':    30
          \ })

    command! Barschemes call fzf#run({
          \ 'source':  reverse(sort(map(globpath(s:bundle_dir, '/vim-airline-themes/autoload/airline/themes/*.vim', 0, 1), 'fnamemodify(v:val, ":t:r")'))),
          \ 'sink':    function('<sid>changetheme'),
          \ 'options': '+m',
          \ 'left':    30
          \ })

    command! Colorschemes call fzf#run({
          \ 'source':  reverse(sort(map(globpath(&rtp, 'colors/*.vim', 0, 1), 'fnamemodify(v:val, ":t:r")'))),
          \ 'sink':    'colorscheme',
          \ 'options': '+m',
          \ 'left':    30
          \ })
    "}}}2

    " Plugin: fruzzy {{{2
    " -----------------------------------------------------------------------------
    " Mapping
    let g:fruzzy#usenative = 1
    let g:fruzzy#sortonempty = 1
    "}}}2

    " Plugin: vim-signature {{{2
    " -----------------------------------------------------------------------------
    let g:SignatureMap = {
        \ 'Leader'             :  "m",
        \ 'PlaceNextMark'      :  "m,",
        \ 'ToggleMarkAtLine'   :  "m.",
        \ 'PurgeMarksAtLine'   :  "m-",
        \ 'DeleteMark'         :  "dm",
        \ 'PurgeMarks'         :  "m<Space>",
        \ 'PurgeMarkers'       :  "m<BS>",
        \ 'GotoNextLineAlpha'  :  "']",
        \ 'GotoPrevLineAlpha'  :  "'[",
        \ 'GotoNextSpotAlpha'  :  "`]",
        \ 'GotoPrevSpotAlpha'  :  "`[",
        \ 'GotoNextLineByPos'  :  "]'",
        \ 'GotoPrevLineByPos'  :  "['",
        \ 'GotoNextSpotByPos'  :  "]`",
        \ 'GotoPrevSpotByPos'  :  "[`",
        \ 'GotoNextMarker'     :  "]-",
        \ 'GotoPrevMarker'     :  "[-",
        \ 'GotoNextMarkerAny'  :  "]=",
        \ 'GotoPrevMarkerAny'  :  "[=",
        \ 'ListBufferMarks'    :  "m/",
        \ 'ListBufferMarkers'  :  "m?"
        \ }
    "}}}2

    " Plugin: ultisnips and vim-snippets {{{2
    " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
    let g:UltiSnipsExpandTrigger="<leader><tab>"
    let g:UltiSnipsJumpForwardTrigger="<c-b>"
    let g:UltiSnipsJumpBackwardTrigger="<c-z>"
    " If you want :UltiSnipsEdit to split your window.
    let g:UltiSnipsEditSplit="vertical"
    "}}}2

    " Plugin: ctrlsf.vim {{{2
    " Preferred order is 'ag' > 'ack' > 'rg' > 'pt' > 'ack-grep'. You can also explicitly set it by
    let g:ctrlsf_ackprg = '/bin/ag'
    let g:ctrlsf_winsize = '30%'
    nnoremap <leader>ss :CtrlSF<CR>
    nmap     <leader>sf <Plug>CtrlSFPrompt
    vmap     <leader>sp <Plug>CtrlSFVwordPath
    vmap     <leader>sF <Plug>CtrlSFVwordExec
    nmap     <leader>sn <Plug>CtrlSFCwordPath
    nmap     <leader>sp <Plug>CtrlSFPwordPath
    nnoremap <leader>so :CtrlSFOpen<CR>
    nnoremap <leader>S :CtrlSFToggle<CR>
    inoremap <leader>S <Esc>:CtrlSFToggle<CR>
    " }}}2

    " Plugin: coc.nvim {{{2
    " TextEdit might fail if hidden is not set.
    set hidden

    " Some servers have issues with backup files, see #649.
    set nobackup
    set nowritebackup

    " Give more space for displaying messages.
    set cmdheight=2

    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
    " delays and poor user experience.
    set updatetime=300

    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("patch-8.1.1564")
      " Recently vim can merge signcolumn and number column into one
      set signcolumn=number
    else
      set signcolumn=yes
    endif

    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    if has('nvim')
      inoremap <silent><expr> <leader><space> coc#refresh()
    else
      inoremap <silent><expr> <c-@> coc#refresh()
    endif

    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
    " position. Coc only does snippet and additional edit on confirm.
    " <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
    if exists('*complete_info')
      inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
    else
      inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    endif

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    nmap <silent> go <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocActionAsync('doHover')
      endif
    endfunction

    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Symbol renaming.
    " nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code.
    xmap <leader>gm  <Plug>(coc-format-selected)
    nmap <leader>gm <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder.
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Applying codeAction to the selected region.
    " Example: `<leader>aap` for current paragraph
    xmap <leader>gg  <Plug>(coc-codeaction-selected)
    nmap <leader>gg  <Plug>(coc-codeaction-selected)

    " TODO: remap key
    " Remap keys for applying codeAction to the current buffer.
    nmap <leader>gc  <Plug>(coc-codeaction)
    " Apply AutoFix to problem on the current line.
    nmap <leader>gf  <Plug>(coc-fix-current)

    " Map function and class text objects
    " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)

    " Use CTRL-S for selections ranges.
    " Requires 'textDocument/selectionRange' support of language server.
    nmap <silent> <C-s> <Plug>(coc-range-select)
    xmap <silent> <C-s> <Plug>(coc-range-select)

    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocAction('format')

    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    " Add (Neo)Vim's native statusline support.
    " NOTE: Please see `:h coc-status` for integrations with external plugins that
    " provide custom statusline: lightline.vim, vim-airline.
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    " Mappings for CoCList
    " Show all diagnostics.
    nnoremap <silent><nowait> <leader><space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions.
    nnoremap <silent><nowait> <leader><space>e  :<C-u>CocList extensions<cr>
    " Show commands.
    nnoremap <silent><nowait> <leader><space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document.
    nnoremap <silent><nowait> <leader><space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols.
    nnoremap <silent><nowait> <leader><space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent><nowait> <leader><space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent><nowait> <leader><space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list.
    nnoremap <silent><nowait> <leader><space>p  :<C-u>CocListResume<CR>
    "}}}2

    "{{{2 cheat.sh-vim github: https://github.com/chubin/cheat.sh
    let g:CheatSheetUrlGetter='curl --silent'
    let g:syntastic_javascript_checkers = [ 'jshint' ]
    let g:syntastic_ocaml_checkers = ['merlin']
    let g:syntastic_python_checkers = ['pylint']
    let g:syntastic_shell_checkers = ['shellcheck']
    " let g:CheatSheetBaseUrl='http://localhost:8002'
    let g:CheatSheetProviders = ['syntastic', 'quickfix']
    "}}}2

"}}}1

" autocommand {{{1

	" Disables automatic commenting on newline:
	autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
	" automatically deletes all trailing whitespace on save.
	autocmd bufwritepre * %s/\s\+$//e
	" 让配置变更立即生效
	" autocmd BufWritePost $MYVIMRC source $MYVIMRC
	" 打开文件时恢复光标位置
	autocmd BufReadPost *
	    \ if line("'\"") > 1 && line("'\"") <= line("$") |
	    \   exe "normal! g`\"" |
	    \ endif
    " 智能当前行高亮
    " autocmd InsertLeave,WinEnter * set cursorline
    " autocmd InsertEnter,WinLeave * set nocursorline

    au BufEnter * if isdirectory(expand('<afile>')) | set nobuflisted | endif

" }}}
