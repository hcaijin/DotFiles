#!/bin/bash
# Copyright (C) 2014 Alexander Keller <github@nycroth.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#------------------------------------------------------------------------
if [[ -z "$INTERFACE" ]] ; then
    INTERFACE="${BLOCK_INSTANCE:-wlp5s0}"
fi
if [[ -z "$LABEL" ]] ; then
    LABEL="${BLOCK_LABEL:-Ôá´}"
fi

MYIPFILE=/tmp/myip.txt
MYPIPFILE=/tmp/myproxyip.txt
#------------------------------------------------------------------------

# As per #36 -- It is transparent: e.g. if the machine has no battery or wireless
# connection (think desktop), the corresponding block should not be displayed.
[[ ! -d /sys/class/net/${INTERFACE}/wireless ]] && exit

SEND_HEADER="üì∂ Network Module"

# If the wifi interface exists but no connection is active, "down" shall be displayed.
if [[ "$(cat /sys/class/net/$INTERFACE/operstate)" = 'down' ]]; then
  FULL_TEXT="‚ùé down"
  COLOR="#FF0000"
else
  QUALITY=$(grep $INTERFACE /proc/net/wireless | awk '{ print int($3 * 100 / 70) }')
  # color
  if [[ $QUALITY -ge 80 ]]; then
      COLOR="#00FF00"
  elif [[ $QUALITY -ge 60 ]]; then
      COLOR="#FFF600"
  elif [[ $QUALITY -ge 40 ]]; then
      COLOR="#FFAE00"
  else
      COLOR="#FF0000"
  fi
  FULL_TEXT="$LABEL$QUALITY%" # full text
fi

case $BLOCK_BUTTON in
  1)
    show_ip_str="<b><span color=\"green\">Show IP Address >>></span></b>"
    ip=$(ip address show $INTERFACE | grep 'inet ' | awk '{print $2}'); [ $? == 0 ] || {
      ip="Pls check your network."
      rm ${MYIPFILE} >/dev/null
      rm ${MYPIPFILE} >/dev/null
    }
    show_ip_str+="\n- Local IP:\n${ip}"
    if [ $ip != "Pls check your NetworkManager." ]
    then
      pubip=$(cat ${MYIPFILE} 2>/dev/null)
      if [ "$pubip" != "" ]
      then
        show_ip_str+="\n-Public IP:\n${pubip}"
      else
        curl myip.ipip.net 1>${MYIPFILE} 2>/dev/null; [ $? == 0 ] || rm ${MYIPFILE} >/dev/null
        pubip=$(cat ${MYIPFILE} 2>/dev/null)
        show_ip_str+="\n-Public IP:\n${pubip:-Pls check your public network.}"
      fi
      ss -tlnp | grep '127.0.0.1:1080' >/dev/null && proxy="--socks5 127.0.0.1:1080"
      if [ -z "$proxy" ]
      then
        rm ${MYPIPFILE} >/dev/null
        # show_ip_str+="\n-Proxy IP:\nPls check your proxy network."
      else
        proxyip=$(cat ${MYPIPFILE} 2>/dev/null)
        if [ "$proxyip" != "" ]
        then
          show_ip_str+="\n-Proxy IP:\n${proxyip}"
        else
          curl ${proxy} myip.ipip.net 1>${MYPIPFILE} 2>/dev/null; [ $? == 0 ] || rm ${MYPIPFILE} >/dev/null
          proxyip=$(cat ${MYPIPFILE} 2>/dev/null)
          show_ip_str+="\n-Proxy IP:\n${proxyip:-Pls check your proxy network.}"
        fi
      fi
    fi
    notify-check-send "$SEND_HEADER" "$show_ip_str" ;;
  2) sudo -A systemctl restart NetworkManager ;;
  3) notify-check-send "$SEND_HEADER" "<b><span color=\"green\">Usage >>></span></b>
- Left click for show ip address.
- Middle click to restart Network." ;;
esac

printf "%s\n" "$FULL_TEXT" # full text
printf "%s\n" "$FULL_TEXT" # full text
echo $COLOR

